//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Bitmap_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct Bitmap_Z {
    ChangeColor(1);
    ObjectHeader objectHeader;
    ChangeColor(1);
    uint32 width;
    uint32 height;
    ChangeColor(1);
    if (ReadUInt() != 0) {
        uint32 ddsSize;
        uint32 unk1;
        uint32 unk2;
        ChangeColor(1);
        byte dds[ddsSize];
    }
    else if (ReadUByte(44) == 12) {
        uint32 unk1;
        uint32 unk2;
        uint32 unk3;
        ChangeColor(1);
        ubyte image[width*height*4];
    }
    else if (ReadUByte(44) == 13) {
        uint32 unk1;
        uint32 unk2;
        uint32 unk3;
        ChangeColor(1);
        ubyte image[width*height*3];
    };
} bitmap;