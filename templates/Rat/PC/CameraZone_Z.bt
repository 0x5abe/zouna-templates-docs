//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio CameraZone_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} TVector4 <read=TVector4ToString>;

string TVector4ToString( TVector4& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} TVector3 <read=TVector3ToString>;

string TVector3ToString( TVector3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} TVector2 <read=TVector2ToString>;

string TVector2ToString( TVector2& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    ubyte X<read=byteToFloat,optimize=false>;
    ubyte Y<read=byteToFloat,optimize=false>;
    ubyte Z<read=byteToFloat,optimize=false>;
} TVector3Byte <read=TVector3ByteToString>;

string TVector3ByteToString( TVector3Byte& value )
{
    local char buffer[255];
    local float normalByteToD3DColorComponentX = ((value.X/255.0));
    local float normalByteToFloatX = ((normalByteToD3DColorComponentX * 2) - 1);
    local float normalByteToD3DColorComponentY = ((value.Y/255.0));
    local float normalByteToFloatY = ((normalByteToD3DColorComponentY * 2) - 1);
    local float normalByteToD3DColorComponentZ = ((value.Z/255.0));
    local float normalByteToFloatZ = ((normalByteToD3DColorComponentZ * 2) - 1);
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

struct Quat {
    TVector3 v;
    float w;
};

struct Mat3x3 {
    TVector3 rows[3];
};

struct Mat4x4 {
    TVector4 rows[4];
};

struct Mat3x4 {
    TVector4 rows[3];
};

struct Box_Z {
    Mat3x4 mat;
    TVector3 vec;
    float maybeScale; // not really used it seems
};

struct Sphere_Z {
    TVector3 Center;
    float radius;
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
    uint32 dataCrc32;
    Sphere_Z bSphereLocal;
    Box_Z bBox;
    float fadeOutDistance;
    uint32 flags;
    uint16 type;
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct RangeSizeOffset {
    uint16 size;
    ChangeColor(1);
    uint16 offset;
};

struct SplineZoneSead_Z {
    TVector2 PMin;
    ChangeColor(1);
    TVector2 PMax;
    ChangeColor(1);
    TVector2 InvDiag;
    ChangeColor(1);
    uint32 maxZoneIndex;
    ChangeColor(1);
    uint32 sizeX;
    ChangeColor(1);
    uint32 sizeY;
    ChangeColor(1);
    RangeSizeOffset gridDA[sizeX*sizeY]; // stores the indices of zones that apply for a certain grid square
    ChangeColor(1);
    uint32 zoneIndexCount;
    uint16 zoneIndices[zoneIndexCount]; // stores indices into splineZones
};

struct Spline {
    uint16 Pt0Id; // first index into points DA
    uint16 Pt1Id; // second index into points DA
};

struct SplineZone {
    float Y; // (maxY + minY / 2) taken from the max and min points of the splines that make it up, used to determine closest zone if 2 or more zones overlap
    ChangeColor(1);
    RangeSizeOffset splineIdsRef; // stores indices of the splineIds that make up this zone
    ChangeColor(1);
    uint16 unkShort1;
    ChangeColor(1);
    uint16 pointFlag; // related to it using Pt0 or Pt1 of the spline
    ChangeColor(1);
    uint32 unkUint;
};

struct SplineZone_Z {
    ObjectHeader header;
    ChangeColor(1);
    TVector4 unkVec4;
    ChangeColor(1);
    uint32 pointCount;
    TVector3 points[pointCount] <optimize=false>;
    ChangeColor(1);
    uint32 splineCount;
    Spline splines[splineCount] <optimize=false>;
    ChangeColor(1);
    uint32 splineZoneCount;
    SplineZone splineZones[splineZoneCount] <optimize=false>;
    ChangeColor(1);
    uint32 splineIdCount;
    uint16 splineIds[splineIdCount] <optimize=false>; // stores indices into the spline DA
    ChangeColor(1);
    uint32 unk12ByteCount; // unused?
    TVector3 unk12Bytes[unk12ByteCount] <optimize=false>; // unused?
    ChangeColor(1);
    SplineZoneSead_Z splineZoneSead;
};

struct Trigger_Z {
    float rot;
    ChangeColor(1);
    float fov; // in rad
    ChangeColor(1);
    float height;
    ChangeColor(1);
    float dist;
    ChangeColor(1);
    float fog;
    ChangeColor(1);
    float far;
    ChangeColor(1);
    float smooth;
    ChangeColor(1);
    TVector4 color;
    ChangeColor(1);
    uint16 flag;
    ChangeColor(1);
    uint16 splineId;
    ChangeColor(1);
    uint16 pointId;
    ChangeColor(1);
    uint16 atPointId;
    ChangeColor(1);
    float splineLength;
    ChangeColor(1);
    TVector3 unk;
};

struct ZoneTriggers_Z {
    RangeSizeOffset triggerIdsRef;
};

struct CameraZone_Z {
    ChangeColor(1);
    SplineZone_Z splineZone;
    ChangeColor(1);
    uint32 triggerCount;
    Trigger_Z triggers[triggerCount] <optimize=false>;
    ChangeColor(1);
    uint32 zoneTriggersCount;
    ZoneTriggers_Z zoneTriggers[zoneTriggersCount] <optimize=false>;
    ChangeColor(1);
    uint32 triggerIdCount;
    uint16 triggerIds[triggerIdCount] <optimize=false>;
} cameraZone;