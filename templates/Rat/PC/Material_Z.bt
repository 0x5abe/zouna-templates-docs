//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Material_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4f <read=Vec4fToString>;

string Vec4fToString( Vec4f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3f <read=Vec3fToString>;

string Vec3fToString( Vec3f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} Vec2f <read=Vec2fToString>;

string Vec2fToString( Vec2f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    ubyte X<read=byteToFloat,optimize=false>;
    ubyte Y<read=byteToFloat,optimize=false>;
    ubyte Z<read=byteToFloat,optimize=false>;
} Vec3fByte <read=Vec3fByteToString>;

string Vec3fByteToString( Vec3fByte& value )
{
    local char buffer[255];
    local float normalByteToD3DColorComponentX = ((value.X/255.0));
    local float normalByteToFloatX = ((normalByteToD3DColorComponentX * 2) - 1);
    local float normalByteToD3DColorComponentY = ((value.Y/255.0));
    local float normalByteToFloatY = ((normalByteToD3DColorComponentY * 2) - 1);
    local float normalByteToD3DColorComponentZ = ((value.Z/255.0));
    local float normalByteToFloatZ = ((normalByteToD3DColorComponentZ * 2) - 1);
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

//Material collision flags:

//0x1 -> UNK
//0x2 -> COLLIDABLE
//0x4 -> UNK
//0x8 -> UNK
//0x10 -> UNK
//0x20 -> UNK
//0x40 -> UNK
//0x80 -> UNK
//0x100 -> UNK
//0x200 -> UNK
//0x400 -> UNK
//0x800 -> UNK
//0x1000 -> UNK
//0x2000 -> UNK
//0x4000 -> UNK
//0x8000 -> UNK
//0x10000 -> UNK
//0x20000 -> UNK
//0x40000 -> Sound related - combined with 80000,100000,200000 changes
//0x80000 -> Sound related - combined with 40000,100000,200000 changes
//0x100000 -> Sound related - combined with 40000,80000,200000 changes
//0x200000 -> Sound related - combined with 40000,80000,100000 changes with 80000 particles change
//0x400000 -> Slide surface 1 -> when used in combination with sticky surface you get slippery surface
//0x800000 -> Slide surface 2
//0x1000000 -> Sticky surface -> when used in combination with Slide surface 1 you get slippery surface
//0x2000000 -> UNK
//0x4000000 -> UNK
//0x8000000 -> UNK
//0x10000000 -> UNK
//0x20000000 -> UNK

//Material render flags:

//0x1 -> UNK
//0x2 -> UNK
//0x4 -> UNK
//0x8 -> UNK
//0x10 -> UNK
//0x20 -> UNK
//0x40 -> UNK
//0x80 -> UNK
//0x100 -> UNK
//0x200 -> UNK
//0x400 -> UNK
//0x800 -> UNK
//0x1000 -> UNK
//0x2000 -> UNK
//0x4000 -> UNK
//0x8000 -> UNK
//0x10000 -> UNK
//0x20000 -> Disable backface culling
//0x40000 -> UNK
//0x80000 -> UNK
//0x100000 -> UNK
//0x200000 -> UNK
//0x400000 -> UNK
//0x800000 -> UNK
//0x1000000 -> UNK
//0x2000000 -> UNK
//0x4000000 -> UNK
//0x8000000 -> UNK
//0x10000000 -> UNK
//0x20000000 -> UNK

struct Mat3x3 {
    Vec3f rows[3];
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
    ubyte links[header.linkSize - (linkCount * 4) - 8];
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct Color {
    float r;
    float g;
    float b;
};

struct Material_Z {
    ChangeColor(1);
    ObjectHeader header;
    ChangeColor(1);
    Color diffuseColor;
    float diffuseOpacity;
    ChangeColor(1);
    Color emissiveColor;
    uint32 cdcdcdcd;
    ChangeColor(1);
    Mat3x4 uvTransformationMatrix; // doesn't get updated normally
    ChangeColor(1);
    Vec3f specular;
    float specularPow;
    Vec4f params; // used by water, idk what else
    ChangeColor(1);
    float rotation; 
    ChangeColor(1);
    Vec2f translation;
    ChangeColor(1);
    Vec2f scale;
    ChangeColor(1);
    uint32 collisionFlag;
    ChangeColor(1);
    uint32 renderFlag;
    ChangeColor(1);
    uint32 objectFlag;
    ChangeColor(1);
    ubyte generalFlag; // 0x1 for diffuse, 0x2 for envmap, 0x4 for normal, 0x8 for specular
    ChangeColor(1);
    uint32 tex[4];
} material;