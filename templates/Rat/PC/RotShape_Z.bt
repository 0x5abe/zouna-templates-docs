//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio RotShape_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4f <read=Vec4fToString>;

string Vec4fToString( Vec4f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3f <read=Vec3fToString>;

string Vec3fToString( Vec3f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} Vec2f <read=Vec2fToString>;

string Vec2fToString( Vec2f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    ubyte X<read=byteToFloat,optimize=false>;
    ubyte Y<read=byteToFloat,optimize=false>;
    ubyte Z<read=byteToFloat,optimize=false>;
} Vec3fByte <read=Vec3fByteToString>;

string Vec3fByteToString( Vec3fByte& value )
{
    local char buffer[255];
    local float normalByteToD3DColorComponentX = ((value.X/255.0));
    local float normalByteToFloatX = ((normalByteToD3DColorComponentX * 2) - 1);
    local float normalByteToD3DColorComponentY = ((value.Y/255.0));
    local float normalByteToFloatY = ((normalByteToD3DColorComponentY * 2) - 1);
    local float normalByteToD3DColorComponentZ = ((value.Z/255.0));
    local float normalByteToFloatZ = ((normalByteToD3DColorComponentZ * 2) - 1);
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

struct Quat {
    Vec3f v;
    float w;
};

struct Mat3x3 {
    Vec3f rows[3];
};

struct Mat4x4 {
    Vec4f rows[4];
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct Box_Z {
    Mat3x4 mat;
    Vec3f vec;
    float maybeScale; // not really used it seems
};

struct Sphere_Z {
    Vec3f Center;
    float radius;
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
    uint32 dataCrc32;
    Sphere_Z bSphereLocal;
    Box_Z bBox;
    float fadeOutDistance;
    uint32 flags;
    uint16 type;
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct PointsRelated0 {
    byte data[12];
};

struct PointsRelated1 {
    byte data[16];
};

struct MorpherRelated {
    byte data[16];
};

struct MorphTargetDescRelated {
    byte data[16];
};

struct MorphTargetDesc_Z {
    uint32 name;
    uint32 MorphTargetDescRelatedCount;
    MorphTargetDescRelated MorphTargetDescRelateds[MorphTargetDescRelatedCount];
};

struct Morpher_Z {
    uint32 MorpherRelatedCount;
    MorpherRelated MorpherRelateds[MorpherRelatedCount];
    uint32 morphTargetDescCount;
    MorphTargetDesc_Z morphTargetDescs[morphTargetDescCount];
};

struct Points_Z {
    ObjectHeader header;
    ChangeColor(1);
    uint32 vertexCount; // maybe vertices
    Vec3f vertices[vertexCount];
    uint32 PointsRelated1Count; // maybe normals
    PointsRelated1 PointsRelateds1[PointsRelated1Count];
    Morpher_Z morpher;
};

struct RotShape_Z {
    ChangeColor(1);
    Points_Z points;
    ChangeColor(1);
    uint32 materialIndexCount;
    uint32 materialIndices[materialIndexCount] <optimize=false>;
    ChangeColor(1);
    uint32 localVertexCount;
    Vec3f localVertices[localVertexCount] <optimize=false>;
    ChangeColor(1);
    uint32 localUVCount;
    Vec2f localUVs[localUVCount] <optimize=false>;
    ChangeColor(1);
    uint32 materialAnimCrc32Count;
    uint32 materialAnimCrc32s[materialAnimCrc32Count];
    ChangeColor(1);
    float scale;
    ChangeColor(1);
    uint16 rotShapeType;
} rotshape;