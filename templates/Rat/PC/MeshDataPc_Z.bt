//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio MeshDataPc_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} TVector4 <read=TVector4ToString>;

string TVector4ToString( TVector4& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} TVector3 <read=TVector3ToString>;

string TVector3ToString( TVector3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} TVector2 <read=TVector2ToString>;

string TVector2ToString( TVector2& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    ubyte X<read=byteToFloat,optimize=false>;
    ubyte Y<read=byteToFloat,optimize=false>;
    ubyte Z<read=byteToFloat,optimize=false>;
} TVector3Byte <read=TVector3ByteToString>;

string TVector3ByteToString( TVector3Byte& value )
{
    local char buffer[255];
    local float normalByteToD3DColorComponentX = ((value.X/255.0));
    local float normalByteToFloatX = ((normalByteToD3DColorComponentX * 2) - 1);
    local float normalByteToD3DColorComponentY = ((value.Y/255.0));
    local float normalByteToFloatY = ((normalByteToD3DColorComponentY * 2) - 1);
    local float normalByteToD3DColorComponentZ = ((value.Z/255.0));
    local float normalByteToFloatZ = ((normalByteToD3DColorComponentZ * 2) - 1);
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

struct Quat {
    TVector3 v;
    float w;
};

struct Mat4x4 {
    TVector4 rows[4];
};

struct Sphere_Z {
    TVector3 Center;
    float radius;
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct Color {
    float r;
    float g;
    float b;
    float a;
};

struct ObjectDatas_Z {
    ObjectHeader objectHeader;
    float unkFloat1;
    Color color;
};

struct unkStruct1 {
    byte data[16];
};

struct unkStruct2 {
    byte data[16];
};

struct unkStruct3 {
    byte data[32];
};

struct unkStruct4 {
    byte data[16];
};

struct MeshVolume_Z {
    uint unkStruct1Count;
    unkStruct1 unkStruct1s[unkStruct1Count];
    uint unkStruct2Count;
    unkStruct2 unkStruct2s[unkStruct2Count];
    uint unkStruct3Count;
    unkStruct3 unkStruct3s[unkStruct3Count];
    uint unkStruct4Count;
    unkStruct4 unkStruct4s[unkStruct4Count];
};

struct MeshData_Z {
    ObjectDatas_Z objectDatas;
    MeshVolume_Z meshVolume;
} meshData;



void PrintInfo() {
    local int i = 0;
    if (meshData.meshVolume.unkStruct1Count > 0) {
        Printf("-- Info -- MeshVolume has #%d unkStruct1s", meshData.meshVolume.unkStruct1Count);
    }
    if (meshData.meshVolume.unkStruct2Count > 0) {
        Printf("-- Info -- MeshVolume has #%d unkStruct2s", meshData.meshVolume.unkStruct2Count);
    }
    if (meshData.meshVolume.unkStruct3Count > 0) {
        Printf("-- Info -- MeshVolume has #%d unkStruct3s", meshData.meshVolume.unkStruct3Count);
    }
    if (meshData.meshVolume.unkStruct4Count > 0) {
        Printf("-- Info -- MeshVolume has #%d unkStruct4s", meshData.meshVolume.unkStruct4Count);
    }
}