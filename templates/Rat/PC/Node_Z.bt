//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Node_Z v1.06.63.0X
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} TVector4 <read=TVector4ToString>;

string TVector4ToString( TVector4& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} TVector3 <read=TVector3ToString>;

string TVector3ToString( TVector3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );
    return buffer;
}

//------------------------------------------------

//Node flags:

//0x1 -> RECURSE (NODE IN BRANCH NEEDS UPDATE)
//0x2 -> UNK
//0x4 -> UNK
//0x8 -> UNK
//0x10 -> MATRIX NEEDS UPDATE (OVERRIDES 0x1, 0x40)
//0x20 -> LIGHTING NEEDS UPDATE
//0x40 -> OBJECT NEEDS UPDATE (OVERRIDES 0x1, IT'S TRS UPDATE)
//0x80 -> INVERSE MATRIX NEEDS UPDATE (ONLY USED BY OBJECT, OR WHEN CALLING GETINVERSEWORLDMATRIX)
//0x100 -> MATRIX CHANGED (USED BY OBJECT)
//0x200 -> RELATED TO CARRYING (LINKED TO ANOTHER NODE?)
//0x400 -> RELATED TO OMNI (BEING LIT BY OMNI?)
//0x800 -> RELATED TO CLIPPING (OCCLUSION)
//0x1000 -> USE AGENT (NO AGENT CREATED IF 0)
//0x2000 -> USE ANIMATED AGENT (LODAGENT_Z IF 0, ANIMATEDAGENT_Z IF 1. ONLY USED BY NODES WITH LOD_Z AS OBJECT)
//0x4000 -> UNK
//0x8000 -> UNK
//0x10000 -> NO COLLISION SEAD (NON COLLIDABLE?)
//0x20000 -> NO DISPLAY SEAD (NOT VISIBLE?)
//0x40000 -> HIDDEN
//0x80000 -> UNK
//0x100000 -> UNK
//0x200000 -> UNK
//0x400000 -> UNK
//0x800000 -> UNK
//0x1000000 -> SHARED DATA (USES OBJECTDATA_Z IF 0, DOESNT IF 1)
//0x2000000 -> RENDERER RELATED
//0x4000000 -> DO COLLISION
//0x8000000 -> DO SHADOW UPDATE (ONLY USED BY NODES WITH LOD_Z AS OBJECT)
//0x10000000 -> HAS ANIMFRAME
//0x20000000 -> AFFECTED BY SPECIAL VISSION (RAT SPECIFIC?)

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct color {
    float R<read=floatToByte>;
    float G<read=floatToByte>;
    float B<read=floatToByte>;
    float A<read=floatToByte>;
};

struct Mat4x4 {
    TVector4 rows[4];
};

struct Rect {
    uint16 x1;
    uint16 y1;
    uint16 x2;
    uint16 y2;
};

struct Sphere_Z {
    TVector3 Center;
    float radius;
};

struct Quat {
    TVector3 v;
    float w;
};

struct Node_Z
{
    ChangeColor(1);
    ObjectHeader objHeader;
    ChangeColor(1);
    uint32 parentCRC32;
    ChangeColor(1);
    uint32 headChildCrc32;
    ChangeColor(1);
    uint32 prevNodeCrc32;
    ChangeColor(1);
    uint32 nextNodeCrc32;
    ChangeColor(1);
    uint32 objectCrc32;
    ChangeColor(1);
    uint32 userDefineCrc32;
    ChangeColor(1);
    uint32 bitmapCrc32; // SHADOW MAP
    ChangeColor(1);
    uint32 unkCrc32;
    ChangeColor(1);
    Mat4x4 inverseWorldTransform; // (row major)
    TVector3 unkVec3f;
    ChangeColor(1);
    uint32 collideSeadsId1;
    ChangeColor(1);
    TVector3 unkVec3f2;
    ChangeColor(1);
    uint32 placeholderWorldMatrixPtr;
    ChangeColor(1);
    TVector3 nodeNormalOrSmth; // used to determine Omni_Z direction and some other stuff
    ChangeColor(1);
    uint32 displaySeadsId1;
    ChangeColor(1);
    Mat4x4 unkMat;
    ChangeColor(1);
    TVector3 translation;
    ChangeColor(1);
    uint32 flags;
    ChangeColor(1);
    Quat rotation;
    float scale;
    float otherScale;
    float oneOverScale;
    float unkFloat1;
    ChangeColor(1);
    color colors<optimize=false>;
    ChangeColor(1);
    Sphere_Z bSphere;
    ChangeColor(1);
    Rect displaySeadsRect;
    ChangeColor(1);
    Rect collideSeadsRect;
    ChangeColor(1);
    Mat4x4 worldTransform; // (row major)
    ChangeColor(1);
    uint32 collideSeadsId2;
    ChangeColor(1);
    uint32 displaySeadsId2;
    ChangeColor(1);
    uint16 unknown4;
    ChangeColor(1);
    uint32 unknown5;
    ChangeColor(1);
    uint32 unknown6;
    PrintInfo();
} node;

void PrintInfo() {
    //Printf("-- Info -- World Transform: \n%s\n", Mat4x4ToString(worldTransform));
    if (node.bitmapCrc32 != 0)
    {
        Printf("-- Info -- HAS BTIMAP CRC\n");
    }
    if (node.unkCrc32 != 0)
    {
        Printf("-- Info -- HAS UNK CRC\n");
    }
    if (!(node.bitmapCrc32 != 0 || node.unkCrc32 != 0))
    {
        //
    }
}

string floatToByte(float& value )
{
    local string str = "";
    local float colorFloatToByte = ((value*255.0));
    SPrintf(str, "%i",colorFloatToByte);
    return str;
}

string Mat4x4ToString( Mat4x4& value )
{
    local char buffer[255];
    SPrintf( buffer, 
             "[%.6f, %.6f, %.6f, %.6f]\n[%.6f, %.6f, %.6f, %.6f]\n[%.6f, %.6f, %.6f, %.6f]\n[%.6f, %.6f, %.6f, %.6f]", 
             value.rows[0].X, value.rows[0].Y, value.rows[0].Z, value.rows[0].W,
             value.rows[1].X, value.rows[1].Y, value.rows[1].Z, value.rows[1].W,
             value.rows[2].X, value.rows[2].Y, value.rows[2].Z, value.rows[2].W,
             value.rows[3].X, value.rows[3].Y, value.rows[3].Z, value.rows[3].W
           );
    return buffer;
}

// doesnt work
local int byteToFloat(float, string str) { 
    local int f = (Atof(str)/255.0);
    return (local int)f;
}