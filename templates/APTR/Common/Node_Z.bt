//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Node_Z v2.128.52.19
//------------------------------------------------

//------------------------------------------------
//--- Color Implementation taken from JPG.bt
LittleEndian();

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4f <read=Vec4fToString>;

string Vec4fToString( Vec4f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3f <read=Vec3fToString>;

string Vec3fToString( Vec3f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} Vec2f <read=Vec2fToString>;

string Vec2fToString( Vec2f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    byte X<read=byteToFloat,optimize=false>;
    byte Y<read=byteToFloat,optimize=false>;
    byte Z<read=byteToFloat,optimize=false>;
} Vec3fByte <read=Vec3fByteToString>;

string Vec3fByteToString( Vec3fByte& value )
{
    local char buffer[255];
    local float normalByteToFloatX = value.X/127.0;
    local float normalByteToFloatY = value.Y/127.0;
    local float normalByteToFloatZ = value.Z/127.0;
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

struct Quat {
    Vec3f v;
    float w;
};

struct Mat3x3 {
    Vec3f rows[3];
};

struct Mat4x4 {
    Vec4f rows[4];
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct Box_Z {
    Mat3x4 mat;
    Vec3f vec;
    float maybeScale; // not really used it seems
};

struct Sphere_Z {
    Vec3f Center;
    float radius;
};

struct BaseObject_Z {
    int64 className;
    int64 fileName;
    int64 name;
    uint32 size;
    uint32 linkHeaderSize;
    uint32 bodySize;
    byte pad[9];
};

struct ResourceObject_Z {
    BaseObject_Z baseObj;
    int64 friendlyName;
};

struct Node_Z {
    ChangeColor(1);
    ResourceObject_Z resObj;
    ChangeColor(1);
    int64 headChildFileName;
    ChangeColor(1);
    int64 nextFileName;
    ChangeColor(1);
    int64 objectFileName;
    ChangeColor(1);
    int64 objectDataFileName;
    ChangeColor(1);
    int64 unkFileName;
    ChangeColor(1);
    int64 userDefineFileName;
    ChangeColor(1);
    int64 unkFileName;
    ChangeColor(1);
    float unkFloats[16];
    ChangeColor(1);
    uint64 flags;
    ChangeColor(1);
    float unkFloats2[6];
    ChangeColor(1);
    Vec4f translationMaybeOrBsphere;
    ChangeColor(1);
    uint32 unkUint;
    ChangeColor(1);
    float unkFloats3[19];
    ChangeColor(1);
    Vec3f translationMaybeOrBsphere;
    float one;
} node;