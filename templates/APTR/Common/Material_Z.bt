//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Mesh_Z v2.128.52.19
//------------------------------------------------

//------------------------------------------------
//--- Color Implementation taken from JPG.bt
LittleEndian();

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4f <read=Vec4fToString>;

string Vec4fToString( Vec4f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3f <read=Vec3fToString>;

string Vec3fToString( Vec3f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} Vec2f <read=Vec2fToString>;

string Vec2fToString( Vec2f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    byte X<read=byteToFloat,optimize=false>;
    byte Y<read=byteToFloat,optimize=false>;
    byte Z<read=byteToFloat,optimize=false>;
} Vec3fByte <read=Vec3fByteToString>;

string Vec3fByteToString( Vec3fByte& value )
{
    local char buffer[255];
    local float normalByteToFloatX = value.X/127.0;
    local float normalByteToFloatY = value.Y/127.0;
    local float normalByteToFloatZ = value.Z/127.0;
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------

struct Quat {
    Vec3f v;
    float w;
};

struct Mat3x3 {
    Vec3f rows[3];
};

struct Mat4x4 {
    Vec4f rows[4];
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct Box_Z {
    Mat3x4 mat;
    Vec3f vec;
    float maybeScale; // not really used it seems
};

struct Sphere_Z {
    Vec3f Center;
    float radius;
};

struct BaseObject_Z {
    int64 className;
    int64 fileName;
    int64 name;
    uint32 size;
    uint32 linkHeaderSize;
    uint32 bodySize;
    byte pad[9];
};

struct ResourceObject_Z {
    BaseObject_Z baseObj;
    int64 linkName;
};

struct Material_Z {
    ChangeColor(1);
    ResourceObject_Z resObj;
    ChangeColor(1);
    byte bytes[304];
    ChangeColor(1);
    uint32 charCount;
    ChangeColor(1);
    char code[charCount];
    ChangeColor(1);
    uint32 flag;
    ChangeColor(1);
    uint32 unkNumber1;
    uint32 unkNumber2;
    int64 bitmapNames[36]; // it's actually 36 but keeping for consistency
    PrintInfo();
} material;

void PrintInfo() {
    local uint32 i = 0;
    local byte used[36];
    for (i = 0; i < 36; i++) {
        used[i] = 0;
    }
    for (i = 0; i < 36; i++) {
        // Used:
        // 0 example FOREST 7342798911816733374
        // 2 example FOREST -8834613610253207550
        // 3 example FOREST -2656030363931111946
        // 4 example FOREST -3687634270585306434
        // 6 example FOREST -4651567117827021983
        // 7 example FOREST -415096154365161564
        // 8 example FOREST 4209926898050423942
        // 9 example FOREST 3887572644266178539
        // 11 example FOREST -1604284364307223953
        // 12 example FOREST 158774757209743742
        // 13 example FOREST 4384868307154907246
        // 14 example FOREST 4384868307154907246
        // 15 example FOREST 62111494758360458
        // 16 example FOREST 2975008329246946398
        // 20 example FOREST -867011178163990293
        // 21 example FOREST -867011178163990293
        // 22 example FOREST 7055378038896655423
        // 23 example FOREST -7227219525178419366
        // 27 example FOREST 6096416155407391986
        // 28 example FOREST -3637664227832517278
        // 29 example FOREST -2834949173014844979
        // 30 example FOREST 8476439280405055791
        // 31 example FOREST 2898167839293657079
        // 32 example FOREST -7474855493450571462
        // 33 example FOREST -2153915276715211254
        // 34 example FOREST -5234277773728738069
        // 35 example FOREST 1568634974002684882
        if (material.bitmapNames[i] != 0 &&
            i != 0 &&
            i != 2 &&
            i != 3 &&
            i != 4 &&
            i != 6 &&
            i != 7 &&
            i != 8 &&
            i != 9 &&
            i != 11 &&
            i != 12 &&
            i != 13 &&
            i != 14 &&
            i != 15 &&
            i != 16 &&
            i != 20 &&
            i != 21 &&
            i != 22 &&
            i != 23 &&
            i != 27 &&
            i != 28 &&
            i != 29 &&
            i != 30 &&
            i != 31 &&
            i != 32 &&
            i != 33 &&
            i != 34 &&
            i != 35)
        {
        //if (material.bitmapNames[i] != 0 && i != 2 && i != 3 && i != 8 && i != 10 && i != 14 && i != 21 && i != 23 && i != 24 && i != 28 && i != 29 && i != 31) {
            Printf("material: %Ld  has bitmapNames[%d] it is %Ld\n", material.resObj.baseObj.fileName, i, material.bitmapNames[i]);
        }
    }
}