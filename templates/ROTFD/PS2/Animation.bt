//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- TotemTech Animation v1.73
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------
struct Vec4f {
    float X;
    float Y;
    float Z;
    float W;
};

struct Vec3f {
    float x;
    float y;
    float z;
};

struct Vec3i16 {
    int16 x;
    int16 y;
    int16 z;
};

struct Quati16 {
    int16 x <read=int16ToFloat,optimize=false>;
    int16 y <read=int16ToFloat,optimize=false>;
    int16 z <read=int16ToFloat,optimize=false>;
    int16 w <read=int16ToFloat,optimize=false>;
};


struct Quat {
    float x;
    float y;
    float z;
    float w;
};

struct Mat4x4 {
    Vec4f rows[4];
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct Box_Z {
    Mat4x4 mat;
};

struct Sphere_Z {
    Vec3f Center;
    float radius;
};

struct Cylindre_Z {
    byte data[36];
};

struct LinkInfo {
    uint32 linkCrc32;
};

struct ResourceHeader {
    uint32 size;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct ObjectHeader {
    ResourceHeader resHeader;
};

struct KeyBezierRot_Z {
    float time;
    Vec3f value; // euler rotation
    Vec3f tangentIn; // euler rotation
    Vec3f tangentOut; // euler rotation
};

struct KeyframerBezierRot_Z {
    uint32 keyCount;
    KeyBezierRot_Z keys[keyCount];
};

struct KeyRot_Z {
    uint16 frame;
    Quati16 quat;
    uint16 junk;
    float omega;
    float sinom;
};

struct KeyframerRot_Z {
    uint16 flag;
    uint32 keyCount;
    KeyRot_Z keys[keyCount];
};

struct KeyVec3fLinear_Z {
    uint16 frame;
    uint16 pad;
    ChangeColor(1);
    Vec3f value;
};

struct KeyframerVec3fLinear_Z {
    uint16 flag;
    ChangeColor(1);
    uint32 keyCount;
    KeyVec3fLinear_Z keys[keyCount] <optimize=false>;
};

struct KeyVec3fComp_Z {
    uint16 frame;
    Vec3i16 value;
    Vec3i16 tangentIn;
    Vec3i16 tangentOut;
};

struct KeyframerVec3fComp_Z {
    uint16 flag;
    uint32 keyCount;
    KeyVec3fComp_Z keys[keyCount];
};

// Message Ids
// 4 unk
// 5 sends message to obj
// 12 used for loop start
// 13 used for loop end
// 14 disable bone flag 0x40
// 15 enable bone flag 0x40
// 16 material color
// 19-20 hide/unhide ?
// 33,34 plays sound
// 182-185 related to attack fx
// 228 starts mission

struct Message_Z {
    uint32 id;
    uint32 param;
    if (id == 0x11 || id == 0x12 || id == 0x13) {
        uint32 strlen;
        char data[strlen] <optimize=false>;
    }
    uint32 name;
};

struct KeyMessage_Z {
    uint16 frame;
    uint32 messageCount;
    Message_Z messages[messageCount] <optimize=false>;
};

struct KeyframerMessage_Z {
    uint16 flag;
    uint32 keyCount;
    KeyMessage_Z keys[keyCount] <optimize=false>;
};

struct KeyFloat_Z {
    uint16 frame;
    uint16 pad;
    float value;
    float tangentIn;
    float tangentOut;
};

struct KeyframerFloat_Z
{
    uint16 flag;
    uint32 keyCount;
    KeyFloat_Z keys[keyCount] <optimize=false>;
};

struct AnimationNode_Z {
    int32 name;
    uint16 flag;
    KeyframerVec3fComp_Z keyframerScaleOrTrans;
    KeyframerRot_Z keyframerRot;
    KeyframerVec3fComp_Z keyframerTransOrScale;
    KeyframerMessage_Z keyframerMessage;
};

struct AnimationMaterial_Z {
    int32 name;
    uint16 flag;
    KeyframerFloat_Z keyframerTranslationU;
    KeyframerFloat_Z keyframerTranslationV;
    KeyframerFloat_Z keyframerUnk1;
    KeyframerFloat_Z keyframerUnk2;
    KeyframerFloat_Z keyframerUnk3;
    KeyframerVec3fComp_Z keyframerDiffuseColor;
    KeyframerVec3fComp_Z keyframerEmissiveColor;
    KeyframerFloat_Z keyframerRotation;
};

struct AnimationMesh_Z {
    int32 name;
    uint16 flag;
    KeyframerFloat_Z keyframerHide; // hides mesh if float is 0
};

struct Animation_Z {
    ChangeColor(1);
    ObjectHeader objHeader;
    ChangeColor(1);
    float maxTime;
    ChangeColor(1);
    uint16 flag; // 0x2 disables smoothing
    ChangeColor(1);
    uint32 animMeshCount;
    ChangeColor(1);
    AnimationMesh_Z animMesh[animMeshCount] <optimize=false>;
    ChangeColor(1);
    uint32 animNodeCount;
    ChangeColor(1);
    AnimationNode_Z animNode[animNodeCount] <optimize=false>;
    ChangeColor(1);
    uint32 animMatCount;
    ChangeColor(1);
    AnimationMaterial_Z animMat[animMatCount] <optimize=false>;
} animation;

string int16ToFloat(int16& value )
{
    local string str = "";
    local float int16ToFloat = (float)value*0.0005;
    SPrintf(str, "%f",int16ToFloat);

    return str;
}
