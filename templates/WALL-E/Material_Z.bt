//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio Material_Z v1.291.03.06
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

typedef struct
{
    float X;
    float Y;
    float Z;
} TVector3 <read=TVector3ToString>;

string TVector3ToString( TVector3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );
    return buffer;
}

struct Mat3x3 {
    TVector3 rows[3];
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
    ubyte links[header.linkSize - (linkCount * 4) - 8];
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct Color {
    float r;
    float g;
    float b;
};

struct Material_Z {
    ChangeColor(1);
    ObjectHeader header;
    ChangeColor(1);
    Color diffuseColor;
    float diffuseOpacity;
    ChangeColor(1);
    Color emissiveColor;
    ChangeColor(1);
    uint32 cdcdcdcd;
    ChangeColor(1);
    Mat3x3 uvTransformationMatrix;
    ChangeColor(1);
    float unks[8];
    uint32 cdcdcdcd;
    uint32 cdcdcdcd;
    uint32 cdcdcdcd;
    ChangeColor(1);
    float diffuseTranslation[2];
    ChangeColor(1);
    float diffuseScale[2];
    ChangeColor(1);
    float diffuseRotation;
    ChangeColor(1);
    uint32 flags[3];
    ChangeColor(1);
    ubyte textureFlag;
    ChangeColor(1);
    if (textureFlag == 1){
        uint32 diffuseTex;
        uint32 unk1;
        uint32 unk2;
        uint32 unk3;
        uint32 unk4;
        uint32 unk5;
        uint32 unk6;
        uint32 unk7;
    }
    else if (textureFlag == 3){
        uint32 diffuseTex; 
        uint32 unkTex;
    }
    else{
        uint32 tex[4];
    };
} material;