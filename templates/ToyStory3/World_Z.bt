//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio World_Z v1.634.78.10
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

struct LinkInfo {
    uint32 linkCrc32;
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct SeadEntry_Z {
    uint32 NextObjectOfThisEntry;
    ChangeColor(1);
	uint32 PrevObjectOfThisEntry;        
    ChangeColor(1);
    uint32 NextEntryOfThisObject;
    ChangeColor(1);
    uint32 GridId;
    ChangeColor(1);
    uint32 nodeCrc32;
    ChangeColor(1);
};

struct unkStruct1 {
    byte data[8];
};

struct Vec2f {
    float x;
    float y;
};

struct SeadHandle_Z {
    Vec2f PMin;
    ChangeColor(1);
    Vec2f PMax;
    ChangeColor(1);
    Vec2f InvDiag;
    ChangeColor(1);
    uint32 sizeX;
    ChangeColor(1);
    uint32 sizeY;
    ChangeColor(1);
    uint32 firstFree;
    ChangeColor(1);
    uint32 freeCount;
    ChangeColor(1);
    uint32 gridSize;
    ChangeColor(1);
    uint32 grid[gridSize];
    ChangeColor(1);
    uint32 seadEntryCount;
    ChangeColor(1);
    SeadEntry_Z seadEntries[seadEntryCount] <optimize=false>;
};

struct SubWorldRange_Z {
    byte data0[24];
    ChangeColor(1);
    uint32 unkStruct1Count;
    ChangeColor(1);
    unkStruct1 unkStructs1[unkStruct1Count];
    ChangeColor(1);
    uint32 unk0;
};

struct SubWorldData_Z {
    byte data0[24];
    ChangeColor(1);
    SubWorldRange_Z subWorldRange;
    ChangeColor(1);
    uint32 unkBytes0Count;
    ChangeColor(1);
    byte unkBytes0[unkBytes0Count];
    ChangeColor(1);
    uint32 unk0Count;
    ChangeColor(1);
    uint32 unk0s[unk0Count];
    ChangeColor(1);
    uint32 unk1Count;
    ChangeColor(1);
    uint32 unk1s[unk1Count];
    ChangeColor(1);
    uint32 unk2Count;
    ChangeColor(1);
    uint32 unk2s[unk2Count];
};

local uint32 freeCountCheck0;
local uint32 freeCountCheck1;
struct World_Z {
    //
    Printf("-------------------------------------------\n");
    ChangeColor(1);
    ObjectHeader objectHeader;
    ChangeColor(1);
    uint32 rootNodeCrc32;
    uint32 warpCrc32;
    uint32 gameObjCrc32;
    uint32 crc32Unk5;
    uint32 crc32Unk6;
    ChangeColor(1);
    uint32 linkedCrc32Count;
    ChangeColor(1);
    uint32 linkedCrc32s[linkedCrc32Count];
    ChangeColor(1);
    SeadHandle_Z seadHandle0;
    ChangeColor(1);
    SeadHandle_Z seadHandle1;
    ChangeColor(1);
    uint32 animFrameCrc32Count;
    ChangeColor(1);
    uint32 animFrameCrc32s[animFrameCrc32Count];
    ChangeColor(1);
    uint32 cameraZoneCrc32Count;
    ChangeColor(1);
    uint32 cameraZoneCrc32s[cameraZoneCrc32Count];
    ChangeColor(1);
    uint32 graphCrc32Count;
    ChangeColor(1);
    uint32 graphCrc32s[graphCrc32Count];
    ChangeColor(1);
    uint32 occluderCrc32Count;
    ChangeColor(1);
    uint32 occluderCrc32s[occluderCrc32Count];
    ChangeColor(1);
    uint32 crc32Unk4Count;
    ChangeColor(1);
    uint32 crc32sUnk4[crc32Unk4Count];
    ChangeColor(1);
    uint32 subWorldDataCount;
    ChangeColor(1);
    SubWorldData_Z subWorldDatas[subWorldDataCount];
    ChangeColor(1);
    local uint32 i = 0;
    for (i = 0; i < seadHandle0.seadEntryCount; i++) {
        if (seadHandle0.seadEntries[i].nodeCrc32 == 0) {
            freeCountCheck0++;
        }
    }
    for (i = 0; i < seadHandle1.seadEntryCount; i++) {
        if (seadHandle1.seadEntries[i].nodeCrc32 == 0) {
            freeCountCheck1++;
        }
    }
    if (subWorldDataCount != 0) {
        Printf("Has subworld Data !!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
    if (crc32Unk4Count != 0) {
        Printf("Has crc32Unk4 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
    if (crc32Unk5 != 0) {
        Printf("Has crc32Unk5 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
    if (crc32Unk6 != 0) {
        Printf("Has crc32Unk6 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
    }
    Printf("Free count check #0: %d\n", freeCountCheck0);
    Printf("Free count check #1: %d\n", freeCountCheck1);

    Printf("DISP SIZEX %d\n", seadHandle0.sizeX);
    Printf("DISP SIZEY %d\n", seadHandle0.sizeY);
    Printf("COLL SIZEX %d\n", seadHandle1.sizeX);
    Printf("COLL SIZEY %d\n", seadHandle1.sizeY);
    
    local double dispSizeX = (double)(seadHandle0.PMax.x - seadHandle0.PMin.x);
    local double dispSizeY = (double)(seadHandle0.PMax.y - seadHandle0.PMin.y);

    local double collSizeX = (double)(seadHandle1.PMax.x - seadHandle1.PMin.x);
    local double collSizeY = (double)(seadHandle1.PMax.y - seadHandle1.PMin.y);

    if (Ceil(dispSizeX/Max((dispSizeX/50.0),15.0)) != (double)seadHandle0.sizeX) {
        Printf("!!!!!!!!!!!!!!DISP INVALID SIZEX\n");
    } else {
        Printf("DISP VALID SIZEX\n");
    }

    if (Ceil(dispSizeY/Max((dispSizeY/50.0),15.0)) != (double)seadHandle0.sizeY) {
        Printf("!!!!!!!!!!!!!!DISP INVALID SIZEY\n");
    } else {
        Printf("DISP VALID SIZEY\n");
    }

    if (Ceil(collSizeX/Max((collSizeX/50.0),3.0)) != (double)seadHandle1.sizeX) {
        Printf("!!!!!!!!!!!!!!COLL INVALID SIZEX\n");
    } else {
        Printf("COLL VALID SIZEX\n");
    }

    if (Ceil(collSizeY/Max((collSizeY/50.0),3.0)) != (double)seadHandle1.sizeY) {
        Printf("!!!!!!!!!!!!!!COLL INVALID SIZEY\n");
    } else {
        Printf("COLL VALID SIZEY\n");
    }
} world;
