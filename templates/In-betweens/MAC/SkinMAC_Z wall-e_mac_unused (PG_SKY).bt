//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//--- Asobo Studio SkinMAC_Z v1.235.88.06
//------------------------------------------------

LittleEndian();

//------------------------------------------------
//--- Color Implementation taken from JPG.bt

local int colorSelect = 0;
local int colorId = 0;
local DWORD clr = 0;
local DWORD jetMap[6*3] = {
	0x0000cc,0x0000ff,0x0033ff,0x0066ff,0x0099ff,0x00ccff,
	0x00cccc,0x33ffcc,0x66ff99,0x99ff66,0xccff33,0xffff00,
	0xffcc00,0xff9900,0xff6600,0xff3300,0xff0000,0xcc0000
};

void ChangeColor(byte bChangeColor) {
	if(bChangeColor == 1) {colorSelect++; colorId = 0;}
	clr = jetMap[(colorSelect%3)*6+(colorId%6)];
	SetBackColor(clr);
	colorId++;
}

//------------------------------------------------

//------------------------------------------------
//--- Vector struct taken from tge

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4f <read=Vec4fToString>;

string Vec4fToString( Vec4f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f, %.6f]", value.X, value.Y, value.Z, value.W );
    return buffer;
}

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3f <read=Vec3fToString>;

string Vec3fToString( Vec3f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

typedef struct
{
    float X;
    float Y;
} Vec2f <read=Vec2fToString>;

string Vec2fToString( Vec2f& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    ubyte X<read=byteToFloat,optimize=false>;
    ubyte Y<read=byteToFloat,optimize=false>;
    ubyte Z<read=byteToFloat,optimize=false>;
} Vec3fByte <read=Vec3fByteToString>;

string Vec3fByteToString( Vec3fByte& value )
{
    local char buffer[255];
    local float normalByteToD3DColorComponentX = ((value.X/255.0));
    local float normalByteToFloatX = ((normalByteToD3DColorComponentX * 2) - 1);
    local float normalByteToD3DColorComponentY = ((value.Y/255.0));
    local float normalByteToFloatY = ((normalByteToD3DColorComponentY * 2) - 1);
    local float normalByteToD3DColorComponentZ = ((value.Z/255.0));
    local float normalByteToFloatZ = ((normalByteToD3DColorComponentZ * 2) - 1);
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", normalByteToFloatX, normalByteToFloatY, normalByteToFloatZ );

    return buffer;
}

//------------------------------------------------


struct Quat {
    Vec3f v;
    float w;
};

struct Mat4x4 {
    Vec4f rows[4];
};

struct Sphere_Z {
    Vec3f Center;
    float radius;
};

struct Mat3x4 {
    Vec4f rows[3];
};

struct Box_Z {
    Mat3x4 mat;
    Vec3f vec;
    float maybeScale; // not really used it seems
};

struct LinkInfo {
    uint32 linkCrc32;
    uint32 linkCount;
    uint32 linkedCrc32[linkCount];
    uint32 skelCrc32;
    Sphere_Z bSphereLocal;
    Box_Z bBox;
    float fadeOutDistance;
    uint32 flags;
    uint16 type;
};

struct ObjectHeader {
    uint32 dataSize;
    uint32 linkSize;
    uint32 decompressedSize;
    uint32 compressedSize;
    uint32 classCrc32;
    uint32 nameCrc32;
    LinkInfo linkInfo;
};

struct MorphPacket_Z {
    uint32 unk0Crc32;
    uint32 unk1Crc32;
}; // unused

struct DynArray_Z {
    uint32 sizeCapacity;
    uint32 ptr;
};

struct skinSubSection {
    ChangeColor(1);
    uint32 materialLinkCrc32;
    uint32 boneNodeNamesCrc32[8];
    DynArray_Z placeholderMorphPacketDA;
    uint32 morphPacketCount;
    MorphPacket_Z morphPackets[morphPacketCount] <optimize=false>;
};

struct skinSection {
     ChangeColor(1);
     uint32 skinSubSectionCount;
     skinSubSection skinSubSections[skinSubSectionCount] <optimize=false>;
};

struct unkStruct1 {
    byte unkBytes[8];
};

struct blendRelated {
    uint32 maybeSomeIndex;
    float maybeBlend;
};

struct ObjectBlend {
    ChangeColor(1);
    uint16 unkShort;
    ChangeColor(1);
    uint32 blendRelated1Count;
    blendRelated blendRelateds1[blendRelated1Count] <optimize=false>;
    ChangeColor(1);
    uint32 blendRelated2Count;
    blendRelated blendRelateds2[blendRelated2Count] <optimize=false>;
};

struct Bone_Z {
    ChangeColor(1);
    uint32 boneNameCrc32;
    ChangeColor(1);
    uint32 objectBlendCount;
    ChangeColor(1);
    ObjectBlend objectBlends[objectBlendCount] <optimize=false>;
};

struct hashElt {
    int value;
    int ref;
};

struct Skin_Z {
    ObjectHeader header;
    ChangeColor(1);
    uint32 meshCrc32Count;
    ChangeColor(1);
    uint32 meshCrc32s[meshCrc32Count] <optimize=false>;
    ChangeColor(1);
    uint32 unkStruct1Count;
    ChangeColor(1);
    unkStruct1 unkStructs1[unkStruct1Count] <optimize=false>;
    ChangeColor(1);
    uint32 boneCount;
    Bone_Z bones[boneCount] <optimize=false>;
    ChangeColor(1);
    byte isClassId;
    if (isClassId) {
        uint32 animClassIdCount;
        hashElt animClassIds[animClassIdCount] <optimize=false>;
        uint32 soundClassIdCount;
        hashElt soundClassIds[soundClassIdCount] <optimize=false>;
    }
};

struct SkinMAC_Z {
    ChangeColor(1);
    Skin_Z skin;
    ChangeColor(1);
    uint32 matrixCacheCheck;
    ChangeColor(1);
    uint32 skinSectionCount;
    skinSection skinSections[skinSectionCount] <optimize=false>;
    PrintInfo();
} skinMac;

void PrintInfo() {
    local uint32 i;
    local uint32 j;
    local uint32 k;
    local uint32 curIndex;
    local uint32 maxIndex = 0;
    for (i = 0; i < skinMac.skin.boneCount; i++) {
        for (j = 0; j < skinMac.skin.bones[i].objectBlendCount; j++) {
            for (k = 0; k < skinMac.skin.bones[i].objectBlends[j].blendRelated1Count; k++) {
                 curIndex = skinMac.skin.bones[i].objectBlends[j].blendRelateds1[k].maybeSomeIndex;
                 if (curIndex > maxIndex) maxIndex = curIndex;
                 Printf("-- Info -- Bone #%d -> objectBlend #%d -> blendRelated1 #%d -> index: %d\n", i, j, k, curIndex);
            }
            for (k = 0; k < skinMac.skin.bones[i].objectBlends[j].blendRelated2Count; k++) {
                curIndex = skinMac.skin.bones[i].objectBlends[j].blendRelateds2[k].maybeSomeIndex;
                if (curIndex > maxIndex) maxIndex = curIndex;
                Printf("-- Info -- Bone #%d -> objectBlend #%d -> blendRelated2 #%d -> index: %d\n", i, j, k, skinMac.skin.bones[i].objectBlends[j].blendRelateds2[k].maybeSomeIndex);
            }
        }
    }
    Printf("-- Info -- maxIndex: %d\n", maxIndex);
}
